AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon Redshift Data API web based event driven architecture'
Parameters:
  RedshiftClusterEndpoint:
    Description: Redshift cluster endpoint including port number and database name
    Type: String
    Default: redshift-cluster.xxxxxx.region.redshift.amazonaws.com:5439/dev
  DbUsername:
    Description: Redshift database user name which has access to run SQL Script.
    Type: String
    AllowedPattern: "([a-z])([a-z]|[0-9])*"
    Default: 'awsuser'
  DDBTableName:
    Type: String
    Default: client_connections
    Description: The name of the new DynamoDB to store connection identifiers for each connected clients. You may leave it as the default value client_connections
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: Required. Can be characters and underscore only. No numbers or special characters allowed.
  WebSocketEndpointSSMParameterName:
    Type: String
    Default: REDSHIFT_WSS_ENDPOINT
    Description: Parameter Name in SSM Parameter Store to store the websocket endpoint uri. You may leave it as the default value client_connections
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: Required. Can be characters and underscore only. No numbers or special characters allowed.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Input Parameters
        Parameters:
          - RedshiftClusterEndpoint
          - DbUsername
          - DDBTableName
          - WebSocketEndpointSSMParameterName
Resources:
  ApplicationWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ApplicationWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ApplicationWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ApplicationWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ApplicationWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ApplicationWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    Properties:
      ApiId:
        Ref: ApplicationWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId:
        Ref: Deployment
      ApiId:
        Ref: ApplicationWebSocket

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: connectionId
        AttributeType: S
      - AttributeName: statementId
        AttributeType: S
      KeySchema:
      - AttributeName: connectionId
        KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: "GSI"
          KeySchema:
            - AttributeName: "statementId"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
      TableName:
        Ref: DDBTableName

  LambdaIAMRole:
    Type: AWS::IAM::Role
    DependsOn:
    - ApplicationWebSocket
    Properties:
      Description : LambdaStartWhatIfIAMRole
      AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
          -
            PolicyName: LambdaInvokePolicy
            PolicyDocument :
              Version: 2012-10-17
              Statement:
                - Effect: "Allow"
                  Action:
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                  - dynamodb:ConditionCheckItem
                  Resource:
                    - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DDBTableName}"
                    - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DDBTableName}/index/*"
                - Effect: "Allow"
                  Action:
                  - execute-api:ManageConnections
                  Resource:
                    - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApplicationWebSocket}/*"

                - Effect: Allow
                  Action:
                    - redshift-data:ExecuteStatement
                    - redshift-data:ListStatements
                    - redshift-data:GetStatementResult
                    - redshift-data:DescribeStatement
                    - ssm:GetParameters
                    - ssm:GetParameter
                    - ssm:DescribeParameters
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - redshift:GetClusterCredentials
                  Resource:
                    - !Sub
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${SourceRedshiftClusterIdentifier}
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref RedshiftClusterEndpoint]]}
                    - !Sub
                      - "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbname:${SourceRedshiftClusterIdentifier}/${RedshiftDatabaseName}"
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref RedshiftClusterEndpoint]],RedshiftDatabaseName: !Select [1, !Split ["/", !Ref RedshiftClusterEndpoint]]}
                    - !Sub
                      - "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbuser:${SourceRedshiftClusterIdentifier}/${DbUsername}"
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref RedshiftClusterEndpoint]]}

  OnConnectFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: OnConnectFunction
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt 'LambdaIAMRole.Arn'
      Timeout: 60
      Environment:
        Variables:
          TABLE_NAME:
            Ref: DDBTableName
          REDSHIFT_ENDPOINT:
            Ref: RedshiftClusterEndpoint
          REDSHIFT_USER:
            Ref: DbUsername
          WS_ENDPOINT_SSM_PARAMETER_NAME:
            Ref: WebSocketEndpointSSMParameterName
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          exports.handler = async event => {
            console.log(event);

            const redshiftClusterId = process.env.REDSHIFT_ENDPOINT.split('.')[0];
            const redshiftDatabaseName = process.env.REDSHIFT_ENDPOINT.split('/')[1];
            const wssEndpoint = await getSSMParameter(process.env.WS_ENDPOINT_SSM_PARAMETER_NAME);

            const statementId = await executeRedshiftSql(redshiftClusterId, redshiftDatabaseName, process.env.REDSHIFT_USER,event.queryStringParameters.tripMonth);
            await putConnectionRecordDdb (process.env.TABLE_NAME, event.requestContext.connectionId, statementId);

            return { statusCode: 200, body: 'Connected.' };
          };

          const getSSMParameter = async (param) => new AWS.SSM()
            .getParameter({ Name: param })
            .promise()
            .then(response => {
              return response.Parameter.Value;
            })
            .catch((e) => {
              console.log('getSSMParameter failed.');
              console.log(e.stack);
              throw e;
            });

          const executeRedshiftSql = async (redshiftClusterId, redshiftDatabaseName, redshiftUser, paramTripMonth) =>  new AWS.RedshiftData({ region: process.env.AWS_REGION })
            .executeStatement({
              ClusterIdentifier: redshiftClusterId,
              Database: redshiftDatabaseName,
              DbUser: redshiftUser,
              Sql: 'SELECT pickup_date as trip_date, round(sum(datediff(minutes, pickup_datetime, dropoff_datetime))/60,2) total_hours, round(sum(trip_distance)) total_distance, round(sum(fare_amount)) total_fare FROM nyc_yellow_taxi where pickup_date between to_date(\''+ paramTripMonth + '\',\'MonthYYYY\') and last_day(to_date(\''+ paramTripMonth + '\',\'MonthYYYY\')) group by 1 order by 1',
              WithEvent: true
            })
            .promise()
            .then(response => {
              return response.Id;
            })
            .catch((e) => {
              console.log('executeRedshiftSql failed.');
              console.log(e.stack);
              throw e;
            });


          const putConnectionRecordDdb = async (tableName, connectionId, statementId) => new AWS.DynamoDB.DocumentClient({ apiVersion: '2012-08-10', region: process.env.AWS_REGION })
            .put({TableName: tableName,
              Item: {
                connectionId: connectionId,
                statementId: statementId
              }
            })
            .promise()
            .catch((e) => {
              console.log('putConnectionRecordDdb failed.');
              console.log(e.stack);
              throw e;
            });


  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ApplicationWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: OnDisconnectFunction
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt 'LambdaIAMRole.Arn'
      Timeout: 60
      Environment:
        Variables:
          TABLE_NAME:
            Ref: DDBTableName
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ddb = new AWS.DynamoDB.DocumentClient({ apiVersion: '2012-08-10', region: process.env.AWS_REGION });
          exports.handler = async event => {
            const deleteParams = {
              TableName: process.env.TABLE_NAME,
              Key: {
                connectionId: event.requestContext.connectionId
              }
            };

            try {
              await ddb.delete(deleteParams).promise();
            } catch (err) {
              return { statusCode: 500, body: 'Failed to disconnect: ' + JSON.stringify(err) };
            }

            return { statusCode: 200, body: 'Disconnected.' };
          };

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ApplicationWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: SendMessageFunction
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt 'LambdaIAMRole.Arn'
      Timeout: 60
      Environment:
        Variables:
          TABLE_NAME:
            Ref: DDBTableName
          WS_ENDPOINT_SSM_PARAMETER_NAME:
            Ref: WebSocketEndpointSSMParameterName
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          exports.handler = async event => {
            console.log(event);
            const { TABLE_NAME } = process.env;
            const wssEndpoint = await getSSMParameter(process.env.WS_ENDPOINT_SSM_PARAMETER_NAME);
            const connectionId = await  getConnectionId(TABLE_NAME, event.data.statementId);

            if (event.data.state == 'FAILED'){
              await postMessage(wssEndpoint, connectionId, '{"columns":["Error"],"records":[["SQL Query Failed"]]}');
            }
            else{
              const results = await  getResults(event.data.statementId);
              await postMessage(wssEndpoint, connectionId, results);
            }

            return { statusCode: 200, body: 'Data sent.' };
          };

          const postMessage = async (wssEndpoint, connectionId, data) => new AWS.ApiGatewayManagementApi({apiVersion: '2018-11-29',endpoint: wssEndpoint})
            .postToConnection({ ConnectionId: connectionId, Data: data })
            .promise()
            .catch((e) => {
              console.log('postMessage failed.');
              console.log(e.stack);
              throw e;
            });

          const getSSMParameter = async (param) => new AWS.SSM()
            .getParameter({ Name: param })
            .promise()
            .then(response => {
              return response.Parameter.Value;
            })
            .catch((e) => {
              console.log('getSSMParameter failed.');
              console.log(e.stack);
              throw e;
            });


          const getConnectionId = async (tableName, statementId) => new AWS.DynamoDB.DocumentClient({ apiVersion: '2012-08-10', region: process.env.AWS_REGION })
            .query({TableName: tableName,
                IndexName: "GSI",
                KeyConditionExpression: "statementId = :s",
                ExpressionAttributeValues: { ":s": statementId }
                })
            .promise()
            .then(response => {
              return response.Items[0].connectionId;
            })
            .catch((e) => {
              console.log('getConnectionId failed.');
              console.log(e.stack);
              throw e;
            });


          const getResults = async (statementId) => new AWS.RedshiftData({ region: process.env.AWS_REGION })
            .getStatementResult({Id: statementId})
            .promise()
            .then(response => {
              let records = [];
              let output = {};
              let rowValues = [];

              output.columns = response.ColumnMetadata.map(metaData => metaData.label);

              response.Records.forEach( record => {
                rowValues = record.map(item => Object.values(item));
                records.push(rowValues.flat());
              });

              output.records=records;
              return JSON.stringify(output);
            })
            .catch((e) => {
              console.log('getResults failed.');
              console.log(e.stack);
              throw e;
            });

  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ApplicationWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: SendMessageFunction
      Principal: apigateway.amazonaws.com

  EventBridgeRedshiftEventRule:
     Type: "AWS::Events::Rule"
     Properties:
       EventPattern: !Sub "{\"source\": [\"aws.redshift-data\"],\"detail\": {\"principal\": [\"arn:aws:sts::${AWS::AccountId}:assumed-role/${LambdaIAMRole}/${OnConnectFunction}\"]}}"
       Description: Respond to Redshift-data events
       State: "ENABLED"
       Targets:
          -
            Arn: !GetAtt 'SendMessageFunction.Arn'
            Id: EventBridgeRedshiftEventRule
            InputTransformer:
              InputPathsMap: {"body":"$.detail"}
              InputTemplate: !Sub "{\"action\":\"sendmessage\", \"data\":<body>}"
  PermissionForRedshiftEventToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "SendMessageFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "EventBridgeRedshiftEventRule"
          - "Arn"

  RedshiftDataApiWebSocketEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Ref WebSocketEndpointSSMParameterName
      Type: String
      Value:
        Fn::Join:
        - ''
        -
          - Ref: ApplicationWebSocket
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - Ref: Stage

Outputs:
  RedshiftDataApiWebSocketEndpoint:
    Description: The WSS Protocol URI to connect to
    Value:
      Fn::Join:
      - ''
      - - wss://
        - Ref: ApplicationWebSocket
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/
        - Ref: Stage
